udp normal program:
client:

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<string.h>
#define N 100
#define PORT 30033

int main()
{
        int sockfd = socket(AF_INET,SOCK_STREAM,0);
        struct sockaddr_in serv_addr;
        serv_addr.sin_family = AF_INET;
        serv_addr.sin_port = htons(PORT);
        serv_addr.sin_addr.s_addr = INADDR_ANY;
        int status = connect(sockfd,(struct sockaddr*)&serv_addr,sizeof(serv_addr));
        if(status == -1)
        {
                printf("error in making connection");
                return 0;
        }
        printf("connection established");

        char buffer_send[N];
        char buffer_recv[N];
        while(1)
        {
                gets(buffer_send);
                send(sockfd,buffer_send,sizeof(buffer_send),0);
                recv(sockfd,buffer_recv,sizeof(buffer_recv),0);
                printf("%s",buffer_recv);

        }


}

server:

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<string.h>
#define N 100
#define PORT 30033


int main()
{
        int serv_sockfd = socket(AF_INET,SOCK_STREAM,0);
        struct sockaddr_in serv_addr;
        serv_addr.sin_family = AF_INET;
        serv_addr.sin_port= htons(PORT);
        serv_addr.sin_addr.s_addr = INADDR_ANY;
        if(bind(serv_sockfd,(struct sockaddr*)&serv_addr,sizeof(serv_addr))<0)
                return 0;
        if(listen(serv_sockfd,2)<0)
                return 0;
        printf("Server listening on port %d\n",PORT);
        int client_sockfd = accept(serv_sockfd,NULL,NULL);
        char buffer_rec[N];
        char buffer_send[N];
        while(1)
        {
        printf("\nServer:Hi");
        recv(client_sockfd,buffer_rec,sizeof(buffer_send),0);
        printf("\nClient:%s\n",buffer_rec);
        if(strcmp(buffer_rec,"exit")==0)
                        return 0;
        int f=0;
        int k=0;
        for(int i=0;i<buffer_rec[i]!='\0';i++)
        {
                buffer_send[k++]=buffer_rec[i];
                if(buffer_rec[i]=='1')
                {
                        int j;
                        for(j=i+1;j<i+5;j++)
                                if(buffer_rec[j]!='1')
                                        break;
                                if(j==i+5)
                                        f=1;
                }
                if(f==1)
                {
                        for(int j=i+1;j<i+5;j++)
                                buffer_send[k++]=buffer_rec[j];
                        i=i+4;
                        f=0;
                        buffer_send[k++]='0';
                }
        }
        buffer_send[k]='\0';
        send(client_sockfd,buffer_send,sizeof(buffer_send),0);
        close(serv_sockfd);
        }
        return 0;
}
